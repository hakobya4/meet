{"ast":null,"code":"import _regeneratorRuntime from \"/Users/karenhakobyan/Desktop/meet/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _createForOfIteratorHelper from \"/Users/karenhakobyan/Desktop/meet/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _asyncToGenerator from \"/Users/karenhakobyan/Desktop/meet/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _classCallCheck from \"/Users/karenhakobyan/Desktop/meet/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/karenhakobyan/Desktop/meet/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { dontWaitFor } from 'workbox-core/_private/dontWaitFor.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { CacheTimestampsModel } from './models/CacheTimestampsModel.js';\nimport './_version.js';\n/**\n * The `CacheExpiration` class allows you define an expiration and / or\n * limit on the number of responses stored in a\n * [`Cache`](https://developer.mozilla.org/en-US/docs/Web/API/Cache).\n *\n * @memberof workbox-expiration\n */\nvar CacheExpiration = /*#__PURE__*/function (_expireEntries, _updateTimestamp, _isURLExpired, _delete2) {\n  /**\n   * To construct a new CacheExpiration instance you must provide at least\n   * one of the `config` properties.\n   *\n   * @param {string} cacheName Name of the cache to apply restrictions to.\n   * @param {Object} config\n   * @param {number} [config.maxEntries] The maximum number of entries to cache.\n   * Entries used the least will be removed as the maximum is reached.\n   * @param {number} [config.maxAgeSeconds] The maximum age of an entry before\n   * it's treated as stale and removed.\n   * @param {Object} [config.matchOptions] The [`CacheQueryOptions`](https://developer.mozilla.org/en-US/docs/Web/API/Cache/delete#Parameters)\n   * that will be used when calling `delete()` on the cache.\n   */\n  function CacheExpiration(cacheName) {\n    var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    _classCallCheck(this, CacheExpiration);\n    this._isRunning = false;\n    this._rerunRequested = false;\n    if (process.env.NODE_ENV !== 'production') {\n      assert.isType(cacheName, 'string', {\n        moduleName: 'workbox-expiration',\n        className: 'CacheExpiration',\n        funcName: 'constructor',\n        paramName: 'cacheName'\n      });\n      if (!(config.maxEntries || config.maxAgeSeconds)) {\n        throw new WorkboxError('max-entries-or-age-required', {\n          moduleName: 'workbox-expiration',\n          className: 'CacheExpiration',\n          funcName: 'constructor'\n        });\n      }\n      if (config.maxEntries) {\n        assert.isType(config.maxEntries, 'number', {\n          moduleName: 'workbox-expiration',\n          className: 'CacheExpiration',\n          funcName: 'constructor',\n          paramName: 'config.maxEntries'\n        });\n      }\n      if (config.maxAgeSeconds) {\n        assert.isType(config.maxAgeSeconds, 'number', {\n          moduleName: 'workbox-expiration',\n          className: 'CacheExpiration',\n          funcName: 'constructor',\n          paramName: 'config.maxAgeSeconds'\n        });\n      }\n    }\n    this._maxEntries = config.maxEntries;\n    this._maxAgeSeconds = config.maxAgeSeconds;\n    this._matchOptions = config.matchOptions;\n    this._cacheName = cacheName;\n    this._timestampModel = new CacheTimestampsModel(cacheName);\n  }\n  /**\n   * Expires entries for the given cache and given criteria.\n   */\n  _createClass(CacheExpiration, [{\n    key: \"expireEntries\",\n    value: function expireEntries() {\n      return (_expireEntries = _expireEntries || _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var minTimestamp, urlsExpired, cache, _iterator, _step, url;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              if (!this._isRunning) {\n                _context.next = 3;\n                break;\n              }\n              this._rerunRequested = true;\n              return _context.abrupt(\"return\");\n            case 3:\n              this._isRunning = true;\n              minTimestamp = this._maxAgeSeconds ? Date.now() - this._maxAgeSeconds * 1000 : 0;\n              _context.next = 7;\n              return this._timestampModel.expireEntries(minTimestamp, this._maxEntries);\n            case 7:\n              urlsExpired = _context.sent;\n              _context.next = 10;\n              return self.caches.open(this._cacheName);\n            case 10:\n              cache = _context.sent;\n              _iterator = _createForOfIteratorHelper(urlsExpired);\n              _context.prev = 12;\n              _iterator.s();\n            case 14:\n              if ((_step = _iterator.n()).done) {\n                _context.next = 20;\n                break;\n              }\n              url = _step.value;\n              _context.next = 18;\n              return cache.delete(url, this._matchOptions);\n            case 18:\n              _context.next = 14;\n              break;\n            case 20:\n              _context.next = 25;\n              break;\n            case 22:\n              _context.prev = 22;\n              _context.t0 = _context[\"catch\"](12);\n              _iterator.e(_context.t0);\n            case 25:\n              _context.prev = 25;\n              _iterator.f();\n              return _context.finish(25);\n            case 28:\n              if (process.env.NODE_ENV !== 'production') {\n                if (urlsExpired.length > 0) {\n                  logger.groupCollapsed(\"Expired \".concat(urlsExpired.length, \" \") + \"\".concat(urlsExpired.length === 1 ? 'entry' : 'entries', \" and removed \") + \"\".concat(urlsExpired.length === 1 ? 'it' : 'them', \" from the \") + \"'\".concat(this._cacheName, \"' cache.\"));\n                  logger.log(\"Expired the following \".concat(urlsExpired.length === 1 ? 'URL' : 'URLs', \":\"));\n                  urlsExpired.forEach(function (url) {\n                    return logger.log(\"    \".concat(url));\n                  });\n                  logger.groupEnd();\n                } else {\n                  logger.debug(\"Cache expiration ran and found no entries to remove.\");\n                }\n              }\n              this._isRunning = false;\n              if (this._rerunRequested) {\n                this._rerunRequested = false;\n                dontWaitFor(this.expireEntries());\n              }\n            case 31:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this, [[12, 22, 25, 28]]);\n      }))).apply(this, arguments);\n    }\n    /**\n     * Update the timestamp for the given URL. This ensures the when\n     * removing entries based on maximum entries, most recently used\n     * is accurate or when expiring, the timestamp is up-to-date.\n     *\n     * @param {string} url\n     */\n  }, {\n    key: \"updateTimestamp\",\n    value: function updateTimestamp(_x) {\n      return (_updateTimestamp = _updateTimestamp || _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(url) {\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              if (process.env.NODE_ENV !== 'production') {\n                assert.isType(url, 'string', {\n                  moduleName: 'workbox-expiration',\n                  className: 'CacheExpiration',\n                  funcName: 'updateTimestamp',\n                  paramName: 'url'\n                });\n              }\n              _context2.next = 3;\n              return this._timestampModel.setTimestamp(url, Date.now());\n            case 3:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, this);\n      }))).apply(this, arguments);\n    }\n    /**\n     * Can be used to check if a URL has expired or not before it's used.\n     *\n     * This requires a look up from IndexedDB, so can be slow.\n     *\n     * Note: This method will not remove the cached entry, call\n     * `expireEntries()` to remove indexedDB and Cache entries.\n     *\n     * @param {string} url\n     * @return {boolean}\n     */\n  }, {\n    key: \"isURLExpired\",\n    value: function isURLExpired(_x2) {\n      return (_isURLExpired = _isURLExpired || _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(url) {\n        var timestamp, expireOlderThan;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              if (this._maxAgeSeconds) {\n                _context3.next = 6;\n                break;\n              }\n              if (!(process.env.NODE_ENV !== 'production')) {\n                _context3.next = 3;\n                break;\n              }\n              throw new WorkboxError(\"expired-test-without-max-age\", {\n                methodName: 'isURLExpired',\n                paramName: 'maxAgeSeconds'\n              });\n            case 3:\n              return _context3.abrupt(\"return\", false);\n            case 6:\n              _context3.next = 8;\n              return this._timestampModel.getTimestamp(url);\n            case 8:\n              timestamp = _context3.sent;\n              expireOlderThan = Date.now() - this._maxAgeSeconds * 1000;\n              return _context3.abrupt(\"return\", timestamp !== undefined ? timestamp < expireOlderThan : true);\n            case 11:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3, this);\n      }))).apply(this, arguments);\n    }\n    /**\n     * Removes the IndexedDB object store used to keep track of cache expiration\n     * metadata.\n     */\n  }, {\n    key: \"delete\",\n    value: function _delete() {\n      return (_delete2 = _delete2 || _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) switch (_context4.prev = _context4.next) {\n            case 0:\n              // Make sure we don't attempt another rerun if we're called in the middle of\n              // a cache expiration.\n              this._rerunRequested = false;\n              _context4.next = 3;\n              return this._timestampModel.expireEntries(Infinity);\n            case 3:\n            case \"end\":\n              return _context4.stop();\n          }\n        }, _callee4, this);\n      }))).apply(this, arguments);\n    }\n  }]);\n  return CacheExpiration;\n}();\nexport { CacheExpiration };","map":{"version":3,"names":["assert","dontWaitFor","logger","WorkboxError","CacheTimestampsModel","CacheExpiration","_expireEntries","_updateTimestamp","_isURLExpired","_delete2","cacheName","config","arguments","length","undefined","_classCallCheck","_isRunning","_rerunRequested","process","env","NODE_ENV","isType","moduleName","className","funcName","paramName","maxEntries","maxAgeSeconds","_maxEntries","_maxAgeSeconds","_matchOptions","matchOptions","_cacheName","_timestampModel","_createClass","key","value","expireEntries","_asyncToGenerator","_regeneratorRuntime","mark","_callee","minTimestamp","urlsExpired","cache","_iterator","_step","url","wrap","_callee$","_context","prev","next","abrupt","Date","now","sent","self","caches","open","_createForOfIteratorHelper","s","n","done","delete","t0","e","f","finish","groupCollapsed","concat","log","forEach","groupEnd","debug","stop","apply","updateTimestamp","_x","_callee2","_callee2$","_context2","setTimestamp","isURLExpired","_x2","_callee3","timestamp","expireOlderThan","_callee3$","_context3","methodName","getTimestamp","_delete","_callee4","_callee4$","_context4","Infinity"],"sources":["/Users/karenhakobyan/Desktop/meet/node_modules/workbox-expiration/CacheExpiration.js"],"sourcesContent":["/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { dontWaitFor } from 'workbox-core/_private/dontWaitFor.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { CacheTimestampsModel } from './models/CacheTimestampsModel.js';\nimport './_version.js';\n/**\n * The `CacheExpiration` class allows you define an expiration and / or\n * limit on the number of responses stored in a\n * [`Cache`](https://developer.mozilla.org/en-US/docs/Web/API/Cache).\n *\n * @memberof workbox-expiration\n */\nclass CacheExpiration {\n    /**\n     * To construct a new CacheExpiration instance you must provide at least\n     * one of the `config` properties.\n     *\n     * @param {string} cacheName Name of the cache to apply restrictions to.\n     * @param {Object} config\n     * @param {number} [config.maxEntries] The maximum number of entries to cache.\n     * Entries used the least will be removed as the maximum is reached.\n     * @param {number} [config.maxAgeSeconds] The maximum age of an entry before\n     * it's treated as stale and removed.\n     * @param {Object} [config.matchOptions] The [`CacheQueryOptions`](https://developer.mozilla.org/en-US/docs/Web/API/Cache/delete#Parameters)\n     * that will be used when calling `delete()` on the cache.\n     */\n    constructor(cacheName, config = {}) {\n        this._isRunning = false;\n        this._rerunRequested = false;\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isType(cacheName, 'string', {\n                moduleName: 'workbox-expiration',\n                className: 'CacheExpiration',\n                funcName: 'constructor',\n                paramName: 'cacheName',\n            });\n            if (!(config.maxEntries || config.maxAgeSeconds)) {\n                throw new WorkboxError('max-entries-or-age-required', {\n                    moduleName: 'workbox-expiration',\n                    className: 'CacheExpiration',\n                    funcName: 'constructor',\n                });\n            }\n            if (config.maxEntries) {\n                assert.isType(config.maxEntries, 'number', {\n                    moduleName: 'workbox-expiration',\n                    className: 'CacheExpiration',\n                    funcName: 'constructor',\n                    paramName: 'config.maxEntries',\n                });\n            }\n            if (config.maxAgeSeconds) {\n                assert.isType(config.maxAgeSeconds, 'number', {\n                    moduleName: 'workbox-expiration',\n                    className: 'CacheExpiration',\n                    funcName: 'constructor',\n                    paramName: 'config.maxAgeSeconds',\n                });\n            }\n        }\n        this._maxEntries = config.maxEntries;\n        this._maxAgeSeconds = config.maxAgeSeconds;\n        this._matchOptions = config.matchOptions;\n        this._cacheName = cacheName;\n        this._timestampModel = new CacheTimestampsModel(cacheName);\n    }\n    /**\n     * Expires entries for the given cache and given criteria.\n     */\n    async expireEntries() {\n        if (this._isRunning) {\n            this._rerunRequested = true;\n            return;\n        }\n        this._isRunning = true;\n        const minTimestamp = this._maxAgeSeconds\n            ? Date.now() - this._maxAgeSeconds * 1000\n            : 0;\n        const urlsExpired = await this._timestampModel.expireEntries(minTimestamp, this._maxEntries);\n        // Delete URLs from the cache\n        const cache = await self.caches.open(this._cacheName);\n        for (const url of urlsExpired) {\n            await cache.delete(url, this._matchOptions);\n        }\n        if (process.env.NODE_ENV !== 'production') {\n            if (urlsExpired.length > 0) {\n                logger.groupCollapsed(`Expired ${urlsExpired.length} ` +\n                    `${urlsExpired.length === 1 ? 'entry' : 'entries'} and removed ` +\n                    `${urlsExpired.length === 1 ? 'it' : 'them'} from the ` +\n                    `'${this._cacheName}' cache.`);\n                logger.log(`Expired the following ${urlsExpired.length === 1 ? 'URL' : 'URLs'}:`);\n                urlsExpired.forEach((url) => logger.log(`    ${url}`));\n                logger.groupEnd();\n            }\n            else {\n                logger.debug(`Cache expiration ran and found no entries to remove.`);\n            }\n        }\n        this._isRunning = false;\n        if (this._rerunRequested) {\n            this._rerunRequested = false;\n            dontWaitFor(this.expireEntries());\n        }\n    }\n    /**\n     * Update the timestamp for the given URL. This ensures the when\n     * removing entries based on maximum entries, most recently used\n     * is accurate or when expiring, the timestamp is up-to-date.\n     *\n     * @param {string} url\n     */\n    async updateTimestamp(url) {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isType(url, 'string', {\n                moduleName: 'workbox-expiration',\n                className: 'CacheExpiration',\n                funcName: 'updateTimestamp',\n                paramName: 'url',\n            });\n        }\n        await this._timestampModel.setTimestamp(url, Date.now());\n    }\n    /**\n     * Can be used to check if a URL has expired or not before it's used.\n     *\n     * This requires a look up from IndexedDB, so can be slow.\n     *\n     * Note: This method will not remove the cached entry, call\n     * `expireEntries()` to remove indexedDB and Cache entries.\n     *\n     * @param {string} url\n     * @return {boolean}\n     */\n    async isURLExpired(url) {\n        if (!this._maxAgeSeconds) {\n            if (process.env.NODE_ENV !== 'production') {\n                throw new WorkboxError(`expired-test-without-max-age`, {\n                    methodName: 'isURLExpired',\n                    paramName: 'maxAgeSeconds',\n                });\n            }\n            return false;\n        }\n        else {\n            const timestamp = await this._timestampModel.getTimestamp(url);\n            const expireOlderThan = Date.now() - this._maxAgeSeconds * 1000;\n            return timestamp !== undefined ? timestamp < expireOlderThan : true;\n        }\n    }\n    /**\n     * Removes the IndexedDB object store used to keep track of cache expiration\n     * metadata.\n     */\n    async delete() {\n        // Make sure we don't attempt another rerun if we're called in the middle of\n        // a cache expiration.\n        this._rerunRequested = false;\n        await this._timestampModel.expireEntries(Infinity); // Expires all.\n    }\n}\nexport { CacheExpiration };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}