{"ast":null,"code":"import _regeneratorRuntime from \"/Users/karenhakobyan/Desktop/meet/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/karenhakobyan/Desktop/meet/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _classCallCheck from \"/Users/karenhakobyan/Desktop/meet/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/karenhakobyan/Desktop/meet/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { openDB, deleteDB } from 'idb';\nimport '../_version.js';\nvar DB_NAME = 'workbox-expiration';\nvar CACHE_OBJECT_STORE = 'cache-entries';\nvar normalizeURL = function normalizeURL(unNormalizedUrl) {\n  var url = new URL(unNormalizedUrl, location.href);\n  url.hash = '';\n  return url.href;\n};\n/**\n * Returns the timestamp model.\n *\n * @private\n */\nvar CacheTimestampsModel = /*#__PURE__*/function (_setTimestamp, _getTimestamp, _expireEntries, _getDb) {\n  /**\n   *\n   * @param {string} cacheName\n   *\n   * @private\n   */\n  function CacheTimestampsModel(cacheName) {\n    _classCallCheck(this, CacheTimestampsModel);\n    this._db = null;\n    this._cacheName = cacheName;\n  }\n  /**\n   * Performs an upgrade of indexedDB.\n   *\n   * @param {IDBPDatabase<CacheDbSchema>} db\n   *\n   * @private\n   */\n  _createClass(CacheTimestampsModel, [{\n    key: \"_upgradeDb\",\n    value: function _upgradeDb(db) {\n      // TODO(philipwalton): EdgeHTML doesn't support arrays as a keyPath, so we\n      // have to use the `id` keyPath here and create our own values (a\n      // concatenation of `url + cacheName`) instead of simply using\n      // `keyPath: ['url', 'cacheName']`, which is supported in other browsers.\n      var objStore = db.createObjectStore(CACHE_OBJECT_STORE, {\n        keyPath: 'id'\n      });\n      // TODO(philipwalton): once we don't have to support EdgeHTML, we can\n      // create a single index with the keyPath `['cacheName', 'timestamp']`\n      // instead of doing both these indexes.\n      objStore.createIndex('cacheName', 'cacheName', {\n        unique: false\n      });\n      objStore.createIndex('timestamp', 'timestamp', {\n        unique: false\n      });\n    }\n    /**\n     * Performs an upgrade of indexedDB and deletes deprecated DBs.\n     *\n     * @param {IDBPDatabase<CacheDbSchema>} db\n     *\n     * @private\n     */\n  }, {\n    key: \"_upgradeDbAndDeleteOldDbs\",\n    value: function _upgradeDbAndDeleteOldDbs(db) {\n      this._upgradeDb(db);\n      if (this._cacheName) {\n        void deleteDB(this._cacheName);\n      }\n    }\n    /**\n     * @param {string} url\n     * @param {number} timestamp\n     *\n     * @private\n     */\n  }, {\n    key: \"setTimestamp\",\n    value: function setTimestamp(_x, _x2) {\n      return (_setTimestamp = _setTimestamp || _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(url, timestamp) {\n        var entry, db, tx;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              url = normalizeURL(url);\n              entry = {\n                url: url,\n                timestamp: timestamp,\n                cacheName: this._cacheName,\n                // Creating an ID from the URL and cache name won't be necessary once\n                // Edge switches to Chromium and all browsers we support work with\n                // array keyPaths.\n                id: this._getId(url)\n              };\n              _context.next = 4;\n              return this.getDb();\n            case 4:\n              db = _context.sent;\n              tx = db.transaction(CACHE_OBJECT_STORE, 'readwrite', {\n                durability: 'relaxed'\n              });\n              _context.next = 8;\n              return tx.store.put(entry);\n            case 8:\n              _context.next = 10;\n              return tx.done;\n            case 10:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this);\n      }))).apply(this, arguments);\n    }\n    /**\n     * Returns the timestamp stored for a given URL.\n     *\n     * @param {string} url\n     * @return {number | undefined}\n     *\n     * @private\n     */\n  }, {\n    key: \"getTimestamp\",\n    value: function getTimestamp(_x3) {\n      return (_getTimestamp = _getTimestamp || _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(url) {\n        var db, entry;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return this.getDb();\n            case 2:\n              db = _context2.sent;\n              _context2.next = 5;\n              return db.get(CACHE_OBJECT_STORE, this._getId(url));\n            case 5:\n              entry = _context2.sent;\n              return _context2.abrupt(\"return\", entry === null || entry === void 0 ? void 0 : entry.timestamp);\n            case 7:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, this);\n      }))).apply(this, arguments);\n    }\n    /**\n     * Iterates through all the entries in the object store (from newest to\n     * oldest) and removes entries once either `maxCount` is reached or the\n     * entry's timestamp is less than `minTimestamp`.\n     *\n     * @param {number} minTimestamp\n     * @param {number} maxCount\n     * @return {Array<string>}\n     *\n     * @private\n     */\n  }, {\n    key: \"expireEntries\",\n    value: function expireEntries(_x4, _x5) {\n      return (_expireEntries = _expireEntries || _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(minTimestamp, maxCount) {\n        var db, cursor, entriesToDelete, entriesNotDeletedCount, result, urlsDeleted, _i, _entriesToDelete, entry;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return this.getDb();\n            case 2:\n              db = _context3.sent;\n              _context3.next = 5;\n              return db.transaction(CACHE_OBJECT_STORE).store.index('timestamp').openCursor(null, 'prev');\n            case 5:\n              cursor = _context3.sent;\n              entriesToDelete = [];\n              entriesNotDeletedCount = 0;\n            case 8:\n              if (!cursor) {\n                _context3.next = 16;\n                break;\n              }\n              result = cursor.value; // TODO(philipwalton): once we can use a multi-key index, we\n              // won't have to check `cacheName` here.\n              if (result.cacheName === this._cacheName) {\n                // Delete an entry if it's older than the max age or\n                // if we already have the max number allowed.\n                if (minTimestamp && result.timestamp < minTimestamp || maxCount && entriesNotDeletedCount >= maxCount) {\n                  // TODO(philipwalton): we should be able to delete the\n                  // entry right here, but doing so causes an iteration\n                  // bug in Safari stable (fixed in TP). Instead we can\n                  // store the keys of the entries to delete, and then\n                  // delete the separate transactions.\n                  // https://github.com/GoogleChrome/workbox/issues/1978\n                  // cursor.delete();\n                  // We only need to return the URL, not the whole entry.\n                  entriesToDelete.push(cursor.value);\n                } else {\n                  entriesNotDeletedCount++;\n                }\n              }\n              _context3.next = 13;\n              return cursor.continue();\n            case 13:\n              cursor = _context3.sent;\n              _context3.next = 8;\n              break;\n            case 16:\n              // TODO(philipwalton): once the Safari bug in the following issue is fixed,\n              // we should be able to remove this loop and do the entry deletion in the\n              // cursor loop above:\n              // https://github.com/GoogleChrome/workbox/issues/1978\n              urlsDeleted = [];\n              _i = 0, _entriesToDelete = entriesToDelete;\n            case 18:\n              if (!(_i < _entriesToDelete.length)) {\n                _context3.next = 26;\n                break;\n              }\n              entry = _entriesToDelete[_i];\n              _context3.next = 22;\n              return db.delete(CACHE_OBJECT_STORE, entry.id);\n            case 22:\n              urlsDeleted.push(entry.url);\n            case 23:\n              _i++;\n              _context3.next = 18;\n              break;\n            case 26:\n              return _context3.abrupt(\"return\", urlsDeleted);\n            case 27:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3, this);\n      }))).apply(this, arguments);\n    }\n    /**\n     * Takes a URL and returns an ID that will be unique in the object store.\n     *\n     * @param {string} url\n     * @return {string}\n     *\n     * @private\n     */\n  }, {\n    key: \"_getId\",\n    value: function _getId(url) {\n      // Creating an ID from the URL and cache name won't be necessary once\n      // Edge switches to Chromium and all browsers we support work with\n      // array keyPaths.\n      return this._cacheName + '|' + normalizeURL(url);\n    }\n    /**\n     * Returns an open connection to the database.\n     *\n     * @private\n     */\n  }, {\n    key: \"getDb\",\n    value: function getDb() {\n      return (_getDb = _getDb || _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) switch (_context4.prev = _context4.next) {\n            case 0:\n              if (this._db) {\n                _context4.next = 4;\n                break;\n              }\n              _context4.next = 3;\n              return openDB(DB_NAME, 1, {\n                upgrade: this._upgradeDbAndDeleteOldDbs.bind(this)\n              });\n            case 3:\n              this._db = _context4.sent;\n            case 4:\n              return _context4.abrupt(\"return\", this._db);\n            case 5:\n            case \"end\":\n              return _context4.stop();\n          }\n        }, _callee4, this);\n      }))).apply(this, arguments);\n    }\n  }]);\n  return CacheTimestampsModel;\n}();\nexport { CacheTimestampsModel };","map":{"version":3,"names":["openDB","deleteDB","DB_NAME","CACHE_OBJECT_STORE","normalizeURL","unNormalizedUrl","url","URL","location","href","hash","CacheTimestampsModel","_setTimestamp","_getTimestamp","_expireEntries","_getDb","cacheName","_classCallCheck","_db","_cacheName","_createClass","key","value","_upgradeDb","db","objStore","createObjectStore","keyPath","createIndex","unique","_upgradeDbAndDeleteOldDbs","setTimestamp","_x","_x2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","timestamp","entry","tx","wrap","_callee$","_context","prev","next","id","_getId","getDb","sent","transaction","durability","store","put","done","stop","apply","arguments","getTimestamp","_x3","_callee2","_callee2$","_context2","get","abrupt","expireEntries","_x4","_x5","_callee3","minTimestamp","maxCount","cursor","entriesToDelete","entriesNotDeletedCount","result","urlsDeleted","_i","_entriesToDelete","_callee3$","_context3","index","openCursor","push","continue","length","delete","_callee4","_callee4$","_context4","upgrade","bind"],"sources":["/Users/karenhakobyan/Desktop/meet/node_modules/workbox-expiration/models/CacheTimestampsModel.js"],"sourcesContent":["/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { openDB, deleteDB } from 'idb';\nimport '../_version.js';\nconst DB_NAME = 'workbox-expiration';\nconst CACHE_OBJECT_STORE = 'cache-entries';\nconst normalizeURL = (unNormalizedUrl) => {\n    const url = new URL(unNormalizedUrl, location.href);\n    url.hash = '';\n    return url.href;\n};\n/**\n * Returns the timestamp model.\n *\n * @private\n */\nclass CacheTimestampsModel {\n    /**\n     *\n     * @param {string} cacheName\n     *\n     * @private\n     */\n    constructor(cacheName) {\n        this._db = null;\n        this._cacheName = cacheName;\n    }\n    /**\n     * Performs an upgrade of indexedDB.\n     *\n     * @param {IDBPDatabase<CacheDbSchema>} db\n     *\n     * @private\n     */\n    _upgradeDb(db) {\n        // TODO(philipwalton): EdgeHTML doesn't support arrays as a keyPath, so we\n        // have to use the `id` keyPath here and create our own values (a\n        // concatenation of `url + cacheName`) instead of simply using\n        // `keyPath: ['url', 'cacheName']`, which is supported in other browsers.\n        const objStore = db.createObjectStore(CACHE_OBJECT_STORE, { keyPath: 'id' });\n        // TODO(philipwalton): once we don't have to support EdgeHTML, we can\n        // create a single index with the keyPath `['cacheName', 'timestamp']`\n        // instead of doing both these indexes.\n        objStore.createIndex('cacheName', 'cacheName', { unique: false });\n        objStore.createIndex('timestamp', 'timestamp', { unique: false });\n    }\n    /**\n     * Performs an upgrade of indexedDB and deletes deprecated DBs.\n     *\n     * @param {IDBPDatabase<CacheDbSchema>} db\n     *\n     * @private\n     */\n    _upgradeDbAndDeleteOldDbs(db) {\n        this._upgradeDb(db);\n        if (this._cacheName) {\n            void deleteDB(this._cacheName);\n        }\n    }\n    /**\n     * @param {string} url\n     * @param {number} timestamp\n     *\n     * @private\n     */\n    async setTimestamp(url, timestamp) {\n        url = normalizeURL(url);\n        const entry = {\n            url,\n            timestamp,\n            cacheName: this._cacheName,\n            // Creating an ID from the URL and cache name won't be necessary once\n            // Edge switches to Chromium and all browsers we support work with\n            // array keyPaths.\n            id: this._getId(url),\n        };\n        const db = await this.getDb();\n        const tx = db.transaction(CACHE_OBJECT_STORE, 'readwrite', {\n            durability: 'relaxed',\n        });\n        await tx.store.put(entry);\n        await tx.done;\n    }\n    /**\n     * Returns the timestamp stored for a given URL.\n     *\n     * @param {string} url\n     * @return {number | undefined}\n     *\n     * @private\n     */\n    async getTimestamp(url) {\n        const db = await this.getDb();\n        const entry = await db.get(CACHE_OBJECT_STORE, this._getId(url));\n        return entry === null || entry === void 0 ? void 0 : entry.timestamp;\n    }\n    /**\n     * Iterates through all the entries in the object store (from newest to\n     * oldest) and removes entries once either `maxCount` is reached or the\n     * entry's timestamp is less than `minTimestamp`.\n     *\n     * @param {number} minTimestamp\n     * @param {number} maxCount\n     * @return {Array<string>}\n     *\n     * @private\n     */\n    async expireEntries(minTimestamp, maxCount) {\n        const db = await this.getDb();\n        let cursor = await db\n            .transaction(CACHE_OBJECT_STORE)\n            .store.index('timestamp')\n            .openCursor(null, 'prev');\n        const entriesToDelete = [];\n        let entriesNotDeletedCount = 0;\n        while (cursor) {\n            const result = cursor.value;\n            // TODO(philipwalton): once we can use a multi-key index, we\n            // won't have to check `cacheName` here.\n            if (result.cacheName === this._cacheName) {\n                // Delete an entry if it's older than the max age or\n                // if we already have the max number allowed.\n                if ((minTimestamp && result.timestamp < minTimestamp) ||\n                    (maxCount && entriesNotDeletedCount >= maxCount)) {\n                    // TODO(philipwalton): we should be able to delete the\n                    // entry right here, but doing so causes an iteration\n                    // bug in Safari stable (fixed in TP). Instead we can\n                    // store the keys of the entries to delete, and then\n                    // delete the separate transactions.\n                    // https://github.com/GoogleChrome/workbox/issues/1978\n                    // cursor.delete();\n                    // We only need to return the URL, not the whole entry.\n                    entriesToDelete.push(cursor.value);\n                }\n                else {\n                    entriesNotDeletedCount++;\n                }\n            }\n            cursor = await cursor.continue();\n        }\n        // TODO(philipwalton): once the Safari bug in the following issue is fixed,\n        // we should be able to remove this loop and do the entry deletion in the\n        // cursor loop above:\n        // https://github.com/GoogleChrome/workbox/issues/1978\n        const urlsDeleted = [];\n        for (const entry of entriesToDelete) {\n            await db.delete(CACHE_OBJECT_STORE, entry.id);\n            urlsDeleted.push(entry.url);\n        }\n        return urlsDeleted;\n    }\n    /**\n     * Takes a URL and returns an ID that will be unique in the object store.\n     *\n     * @param {string} url\n     * @return {string}\n     *\n     * @private\n     */\n    _getId(url) {\n        // Creating an ID from the URL and cache name won't be necessary once\n        // Edge switches to Chromium and all browsers we support work with\n        // array keyPaths.\n        return this._cacheName + '|' + normalizeURL(url);\n    }\n    /**\n     * Returns an open connection to the database.\n     *\n     * @private\n     */\n    async getDb() {\n        if (!this._db) {\n            this._db = await openDB(DB_NAME, 1, {\n                upgrade: this._upgradeDbAndDeleteOldDbs.bind(this),\n            });\n        }\n        return this._db;\n    }\n}\nexport { CacheTimestampsModel };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}